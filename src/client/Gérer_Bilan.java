/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author belma
 */
public class Gérer_Bilan extends javax.swing.JFrame {
    DefaultTableModel model;
    DefaultTableModel model2 = new DefaultTableModel(); // Create a new table model
    /**
     * Creates new form Gérer_Bilan
     */
    
    public Gérer_Bilan() {
        setIconImage(new ImageIcon(getClass().getResource("/icons/applogo.png")).getImage());
        initComponents();
        initAnalyseTable();
        loadAnalyseData();
        initPatientTable();
        loadPatientData();
    }

private void initAnalyseTable() {
    model = new DefaultTableModel() {
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 4:  // Assuming the checkbox is the fifth column
                    return Boolean.class;
                default:
                    return String.class;
            }
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            // Only the checkbox column is editable
            return column == 4;
        }
    };

    model.addColumn("ID");
    model.addColumn("Nom");
    model.addColumn("Prix");
    model.addColumn("Norme");
    model.addColumn("Select");  // Checkbox column
    analyse_table.setModel(model);
}

private void initPatientTable() {
    model2 = new DefaultTableModel() {
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 7: // Checkbox column
                    return Boolean.class;
                default:
                    return String.class;
            }
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 7; // Only the checkbox column is editable
        }
    };

    model2.addColumn("ID");
    model2.addColumn("Nom");
    model2.addColumn("Prenom");
    model2.addColumn("Date_naissance");
    model2.addColumn("Sexe");
    model2.addColumn("Email");
    model2.addColumn("Num_telephone");
    model2.addColumn("Select");
    patient_table.setModel(model2);
}


    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        minimize = new javax.swing.JButton();
        colse = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        gererpatients = new javax.swing.JButton();
        gererdossier = new javax.swing.JButton();
        gererrndv = new javax.swing.JButton();
        home = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        gererbilan = new javax.swing.JButton();
        gerercaisse = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        patient_table = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        analyse_table = new javax.swing.JTable();
        codegenerator = new javax.swing.JToggleButton();
        createbilan = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QuickLab");
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        minimize.setBackground(new java.awt.Color(0, 0, 0));
        minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-minimize-30.png"))); // NOI18N
        minimize.setBorder(null);
        minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimizeActionPerformed(evt);
            }
        });
        jPanel2.add(minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1820, 0, 40, 40));
        minimize.setFocusPainted(false);
        minimize.setBorderPainted(false);
        minimize.setContentAreaFilled(false);
        minimize.setOpaque(true);

        minimize.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                minimize.setBackground(new Color(20,20,20)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                minimize.setBackground(new Color(0, 0,0)); // Original color when mouse not hovering
            }
        });

        colse.setBackground(new java.awt.Color(0, 0, 0));
        colse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-close-30.png"))); // NOI18N
        colse.setBorder(null);
        colse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        colse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colseActionPerformed(evt);
            }
        });
        jPanel2.add(colse, new org.netbeans.lib.awtextra.AbsoluteConstraints(1870, 0, 40, 40));
        colse.setFocusPainted(false);
        colse.setBorderPainted(false);
        colse.setContentAreaFilled(false);
        colse.setOpaque(true);

        colse.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                colse.setBackground(new Color(20,20,20)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                colse.setBackground(new Color(0, 0,0)); // Original color when mouse not hovering
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("QuickLab");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 320, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, 40));

        jPanel4.setBackground(new java.awt.Color(0, 98, 166));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        gererpatients.setBackground(new java.awt.Color(0, 105, 170));
        gererpatients.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        gererpatients.setForeground(new java.awt.Color(255, 255, 255));
        gererpatients.setText("Gérer Patients");
        gererpatients.setToolTipText("");
        gererpatients.setBorder(null);
        gererpatients.setBorderPainted(false);
        gererpatients.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gererpatients.setDoubleBuffered(true);
        gererpatients.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gererpatients.setIconTextGap(50);
        gererpatients.setName(""); // NOI18N
        gererpatients.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gererpatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gererpatientsActionPerformed(evt);
            }
        });
        jPanel4.add(gererpatients, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 320, 70));
        gererpatients.setFocusPainted(false);
        gererpatients.setBorderPainted(false);
        gererpatients.setContentAreaFilled(false);
        gererpatients.setOpaque(true);

        gererpatients.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                gererpatients.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                gererpatients.setBackground(new Color(0, 105, 170)); // Original color when mouse not hovering
            }
        });

        gererdossier.setBackground(new java.awt.Color(0, 105, 170));
        gererdossier.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        gererdossier.setForeground(new java.awt.Color(255, 255, 255));
        gererdossier.setText("Gérer Dossier Patients");
        gererdossier.setBorder(null);
        gererdossier.setBorderPainted(false);
        gererdossier.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gererdossier.setDoubleBuffered(true);
        gererdossier.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gererdossier.setIconTextGap(50);
        gererdossier.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gererdossier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gererdossierActionPerformed(evt);
            }
        });
        jPanel4.add(gererdossier, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 450, 320, 70));
        gererdossier.setFocusPainted(false);
        gererdossier.setBorderPainted(false);
        gererdossier.setContentAreaFilled(false);
        gererdossier.setOpaque(true);

        gererdossier.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                gererdossier.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                gererdossier.setBackground(new Color(0, 105, 170)); // Original color when mouse not hovering
            }
        });

        gererrndv.setBackground(new java.awt.Color(0, 105, 170));
        gererrndv.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        gererrndv.setForeground(new java.awt.Color(255, 255, 255));
        gererrndv.setText("Gérer Rendez-Vous");
        gererrndv.setBorder(null);
        gererrndv.setBorderPainted(false);
        gererrndv.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gererrndv.setDoubleBuffered(true);
        gererrndv.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gererrndv.setIconTextGap(50);
        gererrndv.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gererrndv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gererrndvActionPerformed(evt);
            }
        });
        jPanel4.add(gererrndv, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 550, 320, 70));
        gererrndv.setFocusPainted(false);
        gererrndv.setBorderPainted(false);
        gererrndv.setContentAreaFilled(false);
        gererrndv.setOpaque(true);

        gererrndv.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                gererrndv.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                gererrndv.setBackground(new Color(0, 105, 170)); // Original color when mouse not hovering
            }
        });

        home.setBackground(new java.awt.Color(0, 105, 170));
        home.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        home.setForeground(new java.awt.Color(255, 255, 255));
        home.setText("Accueil");
        home.setToolTipText("");
        home.setBorder(null);
        home.setBorderPainted(false);
        home.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home.setDoubleBuffered(true);
        home.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        home.setIconTextGap(50);
        home.setName(""); // NOI18N
        home.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        jPanel4.add(home, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 320, 70));
        home.setFocusPainted(false);
        home.setBorderPainted(false);
        home.setContentAreaFilled(false);
        home.setOpaque(true);

        home.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                home.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                home.setBackground(new Color(0, 105, 170)); // Original color when mouse not hovering
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Receptionniste");
        jLabel12.setMaximumSize(new java.awt.Dimension(100, 16));
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 320, -1));

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-user-100.png"))); // NOI18N
        jLabel13.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 0, 150, 150));

        gererbilan.setBackground(new java.awt.Color(0, 120, 200));
        gererbilan.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        gererbilan.setForeground(new java.awt.Color(255, 255, 255));
        gererbilan.setText("Gérer Les Bilans");
        gererbilan.setBorder(null);
        gererbilan.setBorderPainted(false);
        gererbilan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gererbilan.setDoubleBuffered(true);
        gererbilan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gererbilan.setIconTextGap(50);
        gererbilan.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gererbilan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gererbilanActionPerformed(evt);
            }
        });
        jPanel4.add(gererbilan, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 650, 320, 70));
        gererbilan.setFocusPainted(false);
        gererbilan.setBorderPainted(false);
        gererbilan.setContentAreaFilled(false);
        gererbilan.setOpaque(true);

        gererbilan.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                gererbilan.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                gererbilan.setBackground(new Color(0, 120, 200)); // Original color when mouse not hovering
            }
        });

        gerercaisse.setBackground(new java.awt.Color(0, 105, 170));
        gerercaisse.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        gerercaisse.setForeground(new java.awt.Color(255, 255, 255));
        gerercaisse.setText("Gérer La Caisse");
        gerercaisse.setBorder(null);
        gerercaisse.setBorderPainted(false);
        gerercaisse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gerercaisse.setDoubleBuffered(true);
        gerercaisse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gerercaisse.setIconTextGap(50);
        gerercaisse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gerercaisse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerercaisseActionPerformed(evt);
            }
        });
        jPanel4.add(gerercaisse, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 750, 320, 70));
        gerercaisse.setFocusPainted(false);
        gerercaisse.setBorderPainted(false);
        gerercaisse.setContentAreaFilled(false);
        gerercaisse.setOpaque(true);

        gerercaisse.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                gerercaisse.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                gerercaisse.setBackground(new Color(0, 105, 170)); // Original color when mouse not hovering
            }
        });

        logout.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        logout.setForeground(new java.awt.Color(0, 115, 194));
        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-log-out-30.png"))); // NOI18N
        logout.setText("Déconnexion");
        logout.setBorder(null);
        logout.setBorderPainted(false);
        logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout.setDoubleBuffered(true);
        logout.setIconTextGap(5);
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jPanel4.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 901, 220, 60));
        logout.setFocusPainted(false);
        logout.setBorderPainted(false);
        logout.setContentAreaFilled(false);
        logout.setOpaque(true);
        logout.setBackground(new Color(255, 255, 255)); // Set default background to white

        logout.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                logout.setBackground(new Color(240,240,240)); // Change to light gray on hover
            }

            @Override
            public void mouseExited(MouseEvent e) {
                logout.setBackground(new Color(255, 255, 255)); // Revert to white when not hovered
            }
        });

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 320, 1000));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patient_table.setAutoCreateRowSorter(true);
        patient_table.setBackground(new java.awt.Color(213, 234, 255));
        patient_table.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        patient_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        patient_table.setFillsViewportHeight(true);
        patient_table.setFocusCycleRoot(true);
        patient_table.setFocusTraversalPolicyProvider(true);
        patient_table.setGridColor(new java.awt.Color(0, 115, 194));
        patient_table.setRowHeight(30);
        patient_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                patient_tableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                patient_tableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(patient_table);
        patient_table.setFont(new Font("Segoe UI", Font.BOLD, 14)); // Font for body
        patient_table.setBackground(new Color(213, 234, 255)); // Background color for body
        patient_table.setRowHeight(25);
        patient_table.setSelectionBackground(new Color(0, 115, 194)); // Selection background color
        patient_table.setSelectionForeground(Color.BLACK); // Selection text color

        // Header styling
        JTableHeader header1 = patient_table.getTableHeader();
        header1.setBackground(new Color(0, 115, 194)); // Background color for header
        header1.setForeground(Color.BLACK); // Text color for header
        header1.setFont(new Font("Segoe UI", Font.BOLD, 16)); // Font for header

        // Centering header text
        ((DefaultTableCellRenderer)header1.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        // Custom cell rendering for body
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        centerRenderer.setBackground(new Color(213, 234, 255));
        patient_table.setDefaultRenderer(Object.class, centerRenderer);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, 640, 400));

        jScrollPane1.setBorder(null);

        analyse_table.setAutoCreateRowSorter(true);
        analyse_table.setBackground(new java.awt.Color(213, 234, 255));
        analyse_table.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        analyse_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        analyse_table.setFillsViewportHeight(true);
        analyse_table.setFocusCycleRoot(true);
        analyse_table.setFocusTraversalPolicyProvider(true);
        analyse_table.setGridColor(new java.awt.Color(0, 115, 194));
        analyse_table.setSelectionBackground(new java.awt.Color(0, 115, 194));
        analyse_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                analyse_tableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(analyse_table);
        analyse_table.setFont(new Font("Segoe UI", Font.BOLD, 14)); // Font for body
        analyse_table.setBackground(new Color(213, 234, 255)); // Background color for body
        analyse_table.setRowHeight(25);
        analyse_table.setSelectionBackground(new Color(0, 115, 194)); // Selection background color
        analyse_table.setSelectionForeground(Color.BLACK); // Selection text color

        // Header styling
        JTableHeader header = analyse_table.getTableHeader();
        header.setBackground(new Color(0, 115, 194)); // Background color for header
        header.setForeground(Color.BLACK); // Text color for header
        header.setFont(new Font("Segoe UI", Font.BOLD, 16)); // Font for header

        // Centering header text
        ((DefaultTableCellRenderer)header.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        // Custom cell rendering for body
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        centerRenderer.setBackground(new Color(213, 234, 255));
        analyse_table.setDefaultRenderer(Object.class, centerRenderer);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 250, 640, 400));

        codegenerator.setBackground(new java.awt.Color(0, 115, 194));
        codegenerator.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        codegenerator.setForeground(new java.awt.Color(255, 255, 255));
        codegenerator.setText("génerer code d'echnentillion");
        codegenerator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codegeneratorActionPerformed(evt);
            }
        });
        jPanel1.add(codegenerator, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 760, 340, 70));
        codegenerator.setFocusPainted(false);
        codegenerator.setBorderPainted(false);
        codegenerator.setContentAreaFilled(false);
        codegenerator.setOpaque(true);
        codegenerator.setBackground(new Color(0, 115, 194)); // Set default background to white

        codegenerator.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                codegenerator.setBackground(new Color(23,142,224)); // Change to light gray on hover
            }

            @Override
            public void mouseExited(MouseEvent e) {
                codegenerator.setBackground(new Color(0, 115, 194)); // Revert to white when not hovered
            }
        });

        createbilan.setBackground(new java.awt.Color(0, 115, 194));
        createbilan.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        createbilan.setForeground(new java.awt.Color(255, 255, 255));
        createbilan.setText("Creer Bilan");
        createbilan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createbilanActionPerformed(evt);
            }
        });
        jPanel1.add(createbilan, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 760, 340, 70));
        createbilan.setFocusPainted(false);
        createbilan.setBorderPainted(false);
        createbilan.setContentAreaFilled(false);
        createbilan.setOpaque(true);
        createbilan.setBackground(new Color(0, 115, 194)); // Set default background to white

        createbilan.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                createbilan.setBackground(new Color(23,142,224)); // Change to light gray on hover
            }

            @Override
            public void mouseExited(MouseEvent e) {
                createbilan.setBackground(new Color(0, 115, 194)); // Revert to white when not hovered
            }
        });

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-medical-history-55.png"))); // NOI18N
        jLabel14.setText("Gérer Les Bilans");
        jLabel14.setIconTextGap(20);
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 680, 60));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel15.setText("Selectionner un patient et au moins un type d'analyse");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 1600, 1000));

        setSize(new java.awt.Dimension(1920, 1040));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void analyse_tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analyse_tableMouseReleased

    }//GEN-LAST:event_analyse_tableMouseReleased

    private void patient_tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patient_tableMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_patient_tableMousePressed

    private void patient_tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patient_tableMouseReleased
       

    }//GEN-LAST:event_patient_tableMouseReleased

    private void createbilanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createbilanActionPerformed
        
           int selectedRowIndex1 = patient_table.getSelectedRow();
    if (selectedRowIndex1 < 0) {
        // Display a JOptionPane with a warning message if no patient is selected
        JOptionPane.showMessageDialog(this, "Please select a patient from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
        return; // Stop further processing
    }
    
    // Check if at least one analysis is selected
    boolean isAnyAnalysisSelected = false;
    for (int i = 0; i < analyse_table.getRowCount(); i++) {
        Boolean isSelected = (Boolean) model.getValueAt(i, 4); // Checkbox column
        if (isSelected != null && isSelected) {
            isAnyAnalysisSelected = true;
            break;
        }
    }
    
    if (!isAnyAnalysisSelected) {
        // Display a JOptionPane with a warning message if no analysis is selected
        JOptionPane.showMessageDialog(this, "Please select at least one analysis.", "Warning", JOptionPane.WARNING_MESSAGE);
        return; // Stop further processing
    }

    // If a patient and at least one analysis are selected, proceed
    okButtonActionPerformed(evt);
   
    }//GEN-LAST:event_createbilanActionPerformed

    private void codegeneratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codegeneratorActionPerformed
                                                
   
    int selectedRowIndex = patient_table.getSelectedRow();
    if (selectedRowIndex >= 0) {
        String id = model2.getValueAt(selectedRowIndex, 0).toString();
        String nom = model2.getValueAt(selectedRowIndex, 1).toString();
        String prenom = model2.getValueAt(selectedRowIndex, 2).toString();
        String dateNaissance = model2.getValueAt(selectedRowIndex, 3).toString();
        String sexe = model2.getValueAt(selectedRowIndex, 4).toString();

        // Get the first letter of nom and prenom
        char firstLetterNom = nom.charAt(0);
        char firstLetterPrenom = prenom.charAt(0);

        // Extract the day from dateNaissance
        String[] dateParts = dateNaissance.split("-");
        String dayOfBirth = dateParts.length > 2 ? dateParts[2] : "00";

        // Get the current date
        java.util.Date currentDate = new java.util.Date();
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyyMMdd");
        String todayDate = dateFormat.format(currentDate);

        // Initialize StringBuilder to collect selected analysis IDs
        StringBuilder selectedAnalysisIds = new StringBuilder();

        // Collect selected analyses' IDs
        for (int i = 0; i < analyse_table.getRowCount(); i++) {
            Boolean isSelected = (Boolean) model.getValueAt(i, 4); // Checkbox column
            if (isSelected != null && isSelected) {
                String id_analyse = model.getValueAt(i, 0).toString();
                selectedAnalysisIds.append(id_analyse).append(",");
            }
        }

        // Remove the trailing comma if there are any selected analyses
        if (selectedAnalysisIds.length() > 0) {
            selectedAnalysisIds.setLength(selectedAnalysisIds.length() - 1);
        }

        // Generate the code
        String generatedCode = id + firstLetterNom + "" + firstLetterPrenom + sexe.charAt(0) + dayOfBirth + todayDate;

        // Append selected analysis IDs to the generated code
        if (selectedAnalysisIds.length() > 0) {
            generatedCode += "-" + selectedAnalysisIds.toString();
        }

        // Display the generated code
        JOptionPane.showMessageDialog(this, "Generated Code: " + generatedCode);
        Client.ajouterechantillion(id, generatedCode); // Pass patient ID and generated code
    } else {
        JOptionPane.showMessageDialog(this, "Please select a patient from the table.");
    } 

    }//GEN-LAST:event_codegeneratorActionPerformed

    private void minimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimizeActionPerformed
        setExtendedState(getExtendedState() | Gérer_Analyse_Medicale.ICONIFIED);
    }//GEN-LAST:event_minimizeActionPerformed

    private void colseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colseActionPerformed

        System.exit(0);
    }//GEN-LAST:event_colseActionPerformed

    private void gererpatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gererpatientsActionPerformed
        smoothTransition("client.Ajouter_Patient", 1000);
    }//GEN-LAST:event_gererpatientsActionPerformed

    private void gererdossierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gererdossierActionPerformed
        smoothTransition("client.Dossier", 1000);
    }//GEN-LAST:event_gererdossierActionPerformed

    private void gererrndvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gererrndvActionPerformed
       smoothTransition("client.Rendez_vous", 1000);
    }//GEN-LAST:event_gererrndvActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed

        smoothTransition("client.Receptionniste", 1000);

    }//GEN-LAST:event_homeActionPerformed

    private void gererbilanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gererbilanActionPerformed
    smoothTransition("client.Gérer_Bilan", 1000);
    }//GEN-LAST:event_gererbilanActionPerformed

    private void gerercaisseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerercaisseActionPerformed
       smoothTransition("client.Payement", 1000);
    }//GEN-LAST:event_gerercaisseActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        setVisible(false);
        new Login().setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed
    
   private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
    int selectedRowIndex1 = patient_table.getSelectedRow();
    if (selectedRowIndex1 >= 0) {
        String nom = model2.getValueAt(selectedRowIndex1, 1).toString();
        String prenom = model2.getValueAt(selectedRowIndex1, 2).toString();
        String dateNaissance = model2.getValueAt(selectedRowIndex1, 3).toString();
        String sexe = model2.getValueAt(selectedRowIndex1, 4).toString();
        String email = model2.getValueAt(selectedRowIndex1, 5).toString();
        String numTelephone = model2.getValueAt(selectedRowIndex1, 6).toString();

        List<String[]> selectedAnalyses = new ArrayList<>();
        for (int i = 0; i < analyse_table.getRowCount(); i++) {
            Boolean isSelected = (Boolean) model.getValueAt(i, 4); // Checkbox column
            if (isSelected != null && isSelected) {
                String nom_analyse = model.getValueAt(i, 1).toString();
                String prix = model.getValueAt(i, 2).toString();
                String norme = model.getValueAt(i, 3).toString();
                selectedAnalyses.add(new String[]{nom_analyse, prix, norme});
            }
        }

        if (!selectedAnalyses.isEmpty()) {
            Client.ajouterBilan(nom, prenom, dateNaissance, sexe, email, numTelephone, selectedAnalyses);
            displayInvoiceAsPDF(nom, prenom, selectedAnalyses); // Pass analyses to PDF generation
        } else {
            JOptionPane.showMessageDialog(this, "Please select at least one analysis.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a patient from the table.");
    }
}
    
   
private void displayInvoiceAsPDF(String nom, String prenom, List<String[]> analyses) {
    try {
        Path path = Paths.get(System.getProperty("user.home"), "Desktop", nom + "_" + prenom + "_Invoice.pdf");
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(path.toString()));
        document.open();

        // Clinic logo and name
        String logoPath = "logo.jpg"; // Ensure you have the correct path
        Image logo = Image.getInstance(logoPath);
        logo.scaleToFit(140, 100);
        logo.setAbsolutePosition(36, 750); // Adjust these values as needed
        document.add(logo);

        com.itextpdf.text.Font clinicNameFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 18, com.itextpdf.text.Font.BOLD, new BaseColor(0, 102, 204));
        Paragraph clinicName = new Paragraph("QUICK LAB", clinicNameFont);
        clinicName.setIndentationLeft(80);
        document.add(clinicName);
        
        document.add(new Paragraph("    "));

        // Facture d'Analyse text
        com.itextpdf.text.Font factureFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 24, com.itextpdf.text.Font.BOLD, new BaseColor(0, 102, 204));
        Paragraph factureText = new Paragraph("FACTURE D'ANALYSE", factureFont);
        factureText.setAlignment(Element.ALIGN_CENTER);
        factureText.setSpacingBefore(10);
        document.add(factureText);

        // Patient name
        com.itextpdf.text.Font patientNameFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 16, com.itextpdf.text.Font.BOLD);
        Paragraph patientName = new Paragraph("Patient: " + nom + " " + prenom, patientNameFont);
        patientName.setSpacingBefore(20);
        patientName.setAlignment(Element.ALIGN_CENTER);
        document.add(patientName);

        // Invoice details table
        PdfPTable table = new PdfPTable(new float[]{3, 1, 1});
        table.setWidthPercentage(100);
        table.setSpacingBefore(10);

        // Headers and data for the table
        addTableHeader(table, new String[]{"Analysis Name", "Price", "Total"});
        fillTableWithData(table, analyses);
        document.add(table);

        document.add(new Paragraph(" "));

        // Contact information
        String contactDetails = "+00 123456789 | QuickLab@example.com | Jijel_Taher - Algeria";
        Paragraph contactInfo = new Paragraph(contactDetails, new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 10));
        contactInfo.setAlignment(Element.ALIGN_CENTER);
        document.add(contactInfo);

        // Social media icons aligned directly below contact information
        PdfPTable socialTable = new PdfPTable(3); // Three social media icons
        socialTable.setWidthPercentage(10);
        socialTable.setSpacingBefore(5); // Small space between contact info and icons

        String[] iconsPaths = {"facebook.png", "twitter.png", "instagram.png"};
        for (String iconPath : iconsPaths) {
            Image icon = Image.getInstance(iconPath);
            icon.scaleToFit(10, 10);
            PdfPCell iconCell = new PdfPCell(icon, true);
            iconCell.setBorder(PdfPCell.NO_BORDER);
            iconCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            socialTable.addCell(iconCell);
        }

        document.add(socialTable);
        document.close();

        // Open the PDF if desktop support is available
        if (Desktop.isDesktopSupported()) {
            Desktop.getDesktop().open(new File(path.toString()));
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Failed to create PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


private void addTableHeader(PdfPTable table, String[] headers) {
    PdfPCell cell;
    for (String header : headers) {
        cell = new PdfPCell(new Phrase(header, new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 12, com.itextpdf.text.Font.BOLD, BaseColor.WHITE)));
        cell.setBackgroundColor(new BaseColor(0, 102, 204));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPadding(8);
        table.addCell(cell);
    }
}


private void fillTableWithData(PdfPTable table, List<String[]> analyses) {
    PdfPCell cell;
    double total = 0;
    for (String[] analysis : analyses) {
        table.addCell(new Phrase(analysis[0]));
        table.addCell(new Phrase(String.format("%.2f", Double.parseDouble(analysis[1]))));
        double lineTotal = Double.parseDouble(analysis[1]);
        table.addCell(new Phrase(String.format("%.2f", lineTotal)));
        total += lineTotal;
    }
    cell = new PdfPCell(new Phrase("Total", new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 12, com.itextpdf.text.Font.BOLD)));
    cell.setColspan(2);
    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
    cell.setPadding(5);
    table.addCell(cell);
    table.addCell(new Phrase(String.format("%.2f", total), new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 12, com.itextpdf.text.Font.BOLD)));
}

    
private void loadAnalyseData() {
    String analyseData = Client.fetchAnalyseData(); // Fetch user data from the server
    if (analyseData != null && !analyseData.equals("No Analyse found")) {
        System.out.println(analyseData);
        // Assuming each user's data is separated by a semicolon
        String[] analyseEntries = analyseData.split(";");

        for (String entry : analyseEntries) {
            String[] dataParts = entry.split(":");
            if (dataParts.length >= 4) {
                Object[] rowData = new Object[5];
                for (int i = 0; i < 4; i++) {
                    rowData[i] = dataParts[i];
                }
                rowData[4] = Boolean.FALSE; // Initialize the checkbox to unchecked
                model.addRow(rowData); // Update the table model directly
            } else {
                System.out.println("Received analyse data in an unexpected format: " + entry);
            }
        }
    } else {
        System.out.println("No data received or analyse not found");
    }
}


private void loadPatientData() {
    String patientData = Client.fetchPatientData(); // Fetch data from server
    if (patientData == null) {
        System.out.println("Failed to receive data from the server.");
        return;
    }

    if (patientData.equals("No Patient found")) {
        System.out.println("No Patient found on the server.");
        return;
    }

    String[] patientEntries = patientData.split(";");
    for (String entry : patientEntries) {
        String[] dataParts = entry.split(":");
        if (dataParts.length == 7) {
            Object[] rowData = new Object[8];
            System.arraycopy(dataParts, 0, rowData, 0, 7);
            rowData[7] = Boolean.FALSE; // Initialize the checkbox to unchecked
            model2.addRow(rowData);
        } else {
            System.out.println("Received patient data in an unexpected format: " + entry);
        }
    }
}


private void smoothTransition(String windowName, int delayMilliseconds) {
    // Initialize the Timer outside the EventQueue.invokeLater call
    Timer timer = new Timer(delayMilliseconds, null);

    java.awt.EventQueue.invokeLater(() -> {
        try {
            // Dynamically create an instance of the specified window class
            Class<?> clazz = Class.forName(windowName);
            java.awt.Window window = (java.awt.Window) clazz.getDeclaredConstructor().newInstance();
            
            // Make the window visible
            window.setVisible(true);

            // Update the Timer's ActionListener here
            timer.addActionListener((e) -> {
                // Hide the current window after the delay
                setVisible(false);
                
                // Stop the Timer
                timer.stop();
            });

            // Start the Timer
            timer.start();
        } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException ex) {
            // Handle any exceptions
            ex.printStackTrace();
        }
    });
}
    
    
private void smoothTransition(String windowName, int delayMilliseconds, Object... constructorArgs) {
    // Initialize the Timer outside the EventQueue.invokeLater call
    Timer timer = new Timer(delayMilliseconds, null);

    java.awt.EventQueue.invokeLater(() -> {
        try {
            // Dynamically create an instance of the specified window class
            Class<?> clazz = Class.forName(windowName);
            // Determine parameter types from constructorArgs
            Class<?>[] parameterTypes = new Class<?>[constructorArgs.length];
            for (int i = 0; i < constructorArgs.length; i++) {
                parameterTypes[i] = constructorArgs[i].getClass();
            }
            java.awt.Window window = (java.awt.Window) clazz.getDeclaredConstructor(parameterTypes).newInstance(constructorArgs);
            
            // Make the window visible
            window.setVisible(true);

            // Update the Timer's ActionListener here
            timer.addActionListener((e) -> {
                // Hide the current window after the delay
                setVisible(false);
                
                // Stop the Timer
                timer.stop();
            });

            // Start the Timer
            timer.start();
        } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException ex) {
            // Handle any exceptions
            ex.printStackTrace();
        }
    });
}     


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gérer_Bilan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gérer_Bilan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gérer_Bilan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gérer_Bilan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gérer_Bilan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable analyse_table;
    private javax.swing.JToggleButton codegenerator;
    private javax.swing.JButton colse;
    private javax.swing.JButton createbilan;
    private javax.swing.JButton gererbilan;
    private javax.swing.JButton gerercaisse;
    private javax.swing.JButton gererdossier;
    private javax.swing.JButton gererpatients;
    private javax.swing.JButton gererrndv;
    private javax.swing.JButton home;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logout;
    private javax.swing.JButton minimize;
    private javax.swing.JTable patient_table;
    // End of variables declaration//GEN-END:variables
}
