/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.InvocationTargetException;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author belma
 */
public class Gérer_Analyse_Medicale extends javax.swing.JFrame {
    DefaultTableModel model;
    /**
     * Creates new form Gérer_analyses_Medicare
     */
   public Gérer_Analyse_Medicale() {
       setIconImage(new ImageIcon(getClass().getResource("/icons/applogo.png")).getImage());
        initComponents();
        obligatoire.setVisible(false);
        obligatoire1.setVisible(false);
        obligatoire2.setVisible(false);
        initAnlyseTable();
        loadAnalyseData();
    }
    
    private void initAnlyseTable() {
     model = new DefaultTableModel() {
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 4:  // Assuming the checkbox is the fifth column
                    return Boolean.class;
                default:
                    return String.class;
            }
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            // Only the checkbox column is editable
            return column == 4;
        }
    };

    model.addColumn("ID");
    model.addColumn("Nom");
    model.addColumn("Prix");
    model.addColumn("Norme");
    jTable1.setModel(model);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        analyse = new javax.swing.JButton();
        stock = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        home = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        minimize = new javax.swing.JButton();
        colse = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        na = new javax.swing.JTextField();
        prix = new javax.swing.JTextField();
        norme = new javax.swing.JTextField();
        ajouter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        supprimer = new javax.swing.JButton();
        modifier = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        obligatoire2 = new javax.swing.JLabel();
        obligatoire = new javax.swing.JLabel();
        obligatoire1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QuickLab");
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(0, 98, 166));
        jPanel4.setPreferredSize(new java.awt.Dimension(320, 1000));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        analyse.setBackground(new java.awt.Color(0, 120, 200));
        analyse.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        analyse.setForeground(new java.awt.Color(255, 255, 255));
        analyse.setText("Gestion d'analyse");
        analyse.setToolTipText("");
        analyse.setBorder(null);
        analyse.setBorderPainted(false);
        analyse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        analyse.setDoubleBuffered(true);
        analyse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        analyse.setIconTextGap(50);
        analyse.setName(""); // NOI18N
        analyse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        analyse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseActionPerformed(evt);
            }
        });
        jPanel4.add(analyse, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 320, 70));
        analyse.setFocusPainted(false);
        analyse.setBorderPainted(false);
        analyse.setContentAreaFilled(false);
        analyse.setOpaque(true);

        analyse.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                analyse.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                analyse.setBackground(new Color(0, 120, 200)); // Original color when mouse not hovering
            }
        });

        stock.setBackground(new java.awt.Color(0, 105, 170));
        stock.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        stock.setForeground(new java.awt.Color(255, 255, 255));
        stock.setText("Verifier l'état de Stock");
        stock.setBorder(null);
        stock.setBorderPainted(false);
        stock.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stock.setDoubleBuffered(true);
        stock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stock.setIconTextGap(50);
        stock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockActionPerformed(evt);
            }
        });
        jPanel4.add(stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 520, 320, 70));
        stock.setFocusPainted(false);
        stock.setBorderPainted(false);
        stock.setContentAreaFilled(false);
        stock.setOpaque(true);

        stock.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                stock.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                stock.setBackground(new Color(0, 105, 170)); // Original color when mouse not hovering
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 105, 170));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Consulter Dossier Patient");
        jButton7.setBorder(null);
        jButton7.setBorderPainted(false);
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.setDoubleBuffered(true);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setIconTextGap(50);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 630, 320, 70));
        jButton7.setFocusPainted(false);
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setOpaque(true);

        jButton7.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                jButton7.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                jButton7.setBackground(new Color(0, 105, 170)); // Original color when mouse not hovering
            }
        });

        home.setBackground(new java.awt.Color(0, 105, 170));
        home.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        home.setForeground(new java.awt.Color(255, 255, 255));
        home.setText("Accueil");
        home.setToolTipText("");
        home.setBorder(null);
        home.setBorderPainted(false);
        home.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home.setDoubleBuffered(true);
        home.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        home.setIconTextGap(50);
        home.setName(""); // NOI18N
        home.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        jPanel4.add(home, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 320, 70));
        home.setFocusPainted(false);
        home.setBorderPainted(false);
        home.setContentAreaFilled(false);
        home.setOpaque(true);

        home.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                home.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                home.setBackground(new Color(0, 105, 170)); // Original color when mouse not hovering
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Médecin");
        jLabel5.setMaximumSize(new java.awt.Dimension(100, 16));
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 320, -1));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-user-100.png"))); // NOI18N
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 0, 150, 150));

        logout.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        logout.setForeground(new java.awt.Color(0, 115, 194));
        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-log-out-30.png"))); // NOI18N
        logout.setText("Déconnexion");
        logout.setBorder(null);
        logout.setBorderPainted(false);
        logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout.setDoubleBuffered(true);
        logout.setIconTextGap(5);
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jPanel4.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 901, 220, 60));
        logout.setFocusPainted(false);
        logout.setBorderPainted(false);
        logout.setContentAreaFilled(false);
        logout.setOpaque(true);
        logout.setBackground(new Color(255, 255, 255)); // Set default background to white

        logout.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                logout.setBackground(new Color(240,240,240)); // Change to light gray on hover
            }

            @Override
            public void mouseExited(MouseEvent e) {
                logout.setBackground(new Color(255, 255, 255)); // Revert to white when not hovered
            }
        });

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 320, 1000));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        minimize.setBackground(new java.awt.Color(0, 0, 0));
        minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-minimize-30.png"))); // NOI18N
        minimize.setBorder(null);
        minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimizeActionPerformed(evt);
            }
        });
        jPanel2.add(minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1820, 0, 40, 40));
        minimize.setFocusPainted(false);
        minimize.setBorderPainted(false);
        minimize.setContentAreaFilled(false);
        minimize.setOpaque(true);

        minimize.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                minimize.setBackground(new Color(20,20,20)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                minimize.setBackground(new Color(0, 0,0)); // Original color when mouse not hovering
            }
        });

        colse.setBackground(new java.awt.Color(0, 0, 0));
        colse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-close-30.png"))); // NOI18N
        colse.setBorder(null);
        colse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        colse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colseActionPerformed(evt);
            }
        });
        jPanel2.add(colse, new org.netbeans.lib.awtextra.AbsoluteConstraints(1870, 0, 40, 40));
        colse.setFocusPainted(false);
        colse.setBorderPainted(false);
        colse.setContentAreaFilled(false);
        colse.setOpaque(true);

        colse.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                colse.setBackground(new Color(20,20,20)); // Darker blue when mouse hovers
            }

            @Override
            public void mouseExited(MouseEvent e) {
                colse.setBackground(new Color(0, 0,0)); // Original color when mouse not hovering
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("QuickLab");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 320, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, 40));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Nom analyse");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 400, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Norme");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 580, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Prix");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 490, -1, -1));

        na.setBackground(new java.awt.Color(213, 234, 255));
        na.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        na.setBorder(null);
        na.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naActionPerformed(evt);
            }
        });
        jPanel1.add(na, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 430, 340, 40));
        na.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)));

    prix.setBackground(new java.awt.Color(213, 234, 255));
    prix.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    prix.setBorder(null);
    prix.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            prixActionPerformed(evt);
        }
    });
    jPanel1.add(prix, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 520, 340, 40));
    prix.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE),
        BorderFactory.createEmptyBorder(5, 10, 5, 10)));

norme.setBackground(new java.awt.Color(213, 234, 255));
norme.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
norme.setBorder(null);
jPanel1.add(norme, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 610, 340, 40));
norme.setBorder(BorderFactory.createCompoundBorder(
    BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE),
    BorderFactory.createEmptyBorder(5, 10, 5, 10)));

    ajouter.setBackground(new java.awt.Color(0, 115, 194));
    ajouter.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    ajouter.setForeground(new java.awt.Color(255, 255, 255));
    ajouter.setText("Ajouter");
    ajouter.setBorder(null);
    ajouter.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ajouterActionPerformed(evt);
        }
    });
    jPanel1.add(ajouter, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 760, 340, 70));
    ajouter.setFocusPainted(false);
    ajouter.setBorderPainted(false);
    ajouter.setContentAreaFilled(false);
    ajouter.setOpaque(true);

    ajouter.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseEntered(MouseEvent e) {
            ajouter.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
        }

        @Override
        public void mouseExited(MouseEvent e) {
            ajouter.setBackground(new Color(0, 115, 194)); // Original color when mouse not hovering
        }
    });

    jScrollPane1.setBackground(new java.awt.Color(0, 115, 194));
    jScrollPane1.setBorder(null);
    jScrollPane1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
    jScrollPane1.setRowHeaderView(null);

    jTable1.setAutoCreateRowSorter(true);
    jTable1.setBackground(new java.awt.Color(213, 234, 255));
    jTable1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3"
        }
    ));
    jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jTable1.setFillsViewportHeight(true);
    jTable1.setFocusCycleRoot(true);
    jTable1.setFocusTraversalPolicyProvider(true);
    jTable1.setGridColor(new java.awt.Color(213, 234, 255));
    jTable1.setSelectionBackground(new java.awt.Color(0, 115, 194));
    jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            jTable1MouseReleased(evt);
        }
    });
    jScrollPane1.setViewportView(jTable1);
    jTable1.setFont(new Font("Segoe UI", Font.BOLD, 14)); // Font for body
    jTable1.setBackground(new Color(213, 234, 255)); // Background color for body
    jTable1.setRowHeight(25);
    jTable1.setSelectionBackground(new Color(0, 115, 194)); // Selection background color
    jTable1.setSelectionForeground(Color.BLACK); // Selection text color

    // Header styling
    JTableHeader header = jTable1.getTableHeader();
    header.setBackground(new Color(0, 115, 194)); // Background color for header
    header.setForeground(Color.BLACK); // Text color for header
    header.setFont(new Font("Segoe UI", Font.BOLD, 16)); // Font for header

    // Centering header text
    ((DefaultTableCellRenderer)header.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

    // Custom cell rendering for body
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
    centerRenderer.setBackground(new Color(213, 234, 255));
    jTable1.setDefaultRenderer(Object.class, centerRenderer);

    jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 270, 850, 430));

    supprimer.setBackground(new java.awt.Color(0, 115, 194));
    supprimer.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    supprimer.setForeground(new java.awt.Color(255, 255, 255));
    supprimer.setText("Supprimer");
    supprimer.setBorder(null);
    supprimer.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            supprimerActionPerformed(evt);
        }
    });
    jPanel1.add(supprimer, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 760, 340, 70));
    supprimer.setFocusPainted(false);
    supprimer.setBorderPainted(false);
    supprimer.setContentAreaFilled(false);
    supprimer.setOpaque(true);

    supprimer.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseEntered(MouseEvent e) {
            supprimer.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
        }

        @Override
        public void mouseExited(MouseEvent e) {
            supprimer.setBackground(new Color(0, 115, 194)); // Original color when mouse not hovering
        }
    });

    modifier.setBackground(new java.awt.Color(0, 115, 194));
    modifier.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
    modifier.setForeground(new java.awt.Color(255, 255, 255));
    modifier.setText("Modifier");
    modifier.setBorder(null);
    modifier.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            modifierActionPerformed(evt);
        }
    });
    jPanel1.add(modifier, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 760, 340, 70));
    modifier.setFocusPainted(false);
    modifier.setBorderPainted(false);
    modifier.setContentAreaFilled(false);
    modifier.setOpaque(true);

    modifier.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseEntered(MouseEvent e) {
            modifier.setBackground(new Color(23,142,224)); // Darker blue when mouse hovers
        }

        @Override
        public void mouseExited(MouseEvent e) {
            modifier.setBackground(new Color(0, 115, 194)); // Original color when mouse not hovering
        }
    });

    jLabel10.setBackground(new java.awt.Color(255, 255, 255));
    jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
    jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gerant icons/icons8-lab-items-55.png"))); // NOI18N
    jLabel10.setText("Gestion D'analyse");
    jLabel10.setIconTextGap(20);
    jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 570, 60));

    jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
    jLabel9.setText("Les Informations D'analyse");
    jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, -1, -1));

    obligatoire2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    obligatoire2.setForeground(new java.awt.Color(204, 0, 0));
    obligatoire2.setText("*");
    jPanel1.add(obligatoire2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 570, 20, -1));

    obligatoire.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    obligatoire.setForeground(new java.awt.Color(204, 0, 0));
    obligatoire.setText("*");
    jPanel1.add(obligatoire, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, 20, -1));

    obligatoire1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    obligatoire1.setForeground(new java.awt.Color(204, 0, 0));
    obligatoire1.setText("*");
    jPanel1.add(obligatoire1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 480, 20, -1));

    getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 1600, 1000));

    setSize(new java.awt.Dimension(1920, 1040));
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ajouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterActionPerformed
   String naValue = na.getText();
    String prixValue = prix.getText();
    String normeValue = norme.getText();
    
    
    ///////////////////////////////////////////////////////////////////////////////////////
    if (naValue.trim().isEmpty()) {
        
        obligatoire.setVisible(true);
     
    }else{
         obligatoire.setVisible(false);
        
    }
    
    if (prixValue.trim().isEmpty()) {
        
        obligatoire1.setVisible(true);
     
    }else{
         obligatoire1.setVisible(false);
        
    }
    
    if (normeValue.trim().isEmpty()) {
        
        obligatoire2.setVisible(true);
     
    }else{
         obligatoire2.setVisible(false);
        
    }
    
    
    
    if(!naValue.trim().isEmpty() && !prixValue.trim().isEmpty() && !normeValue.trim().isEmpty() ){
 
   
        // Send the data to the Client class
         Client.sendAnalyseInfo(naValue, normeValue, prixValue);
        
        JOptionPane.showMessageDialog(null, "Analyse ajouté avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);
        
        
         loadAnalyseDataForAjouter();
         
         clearInputFields();
        
        
       
        
 }    
    }//GEN-LAST:event_ajouterActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        int i = jTable1.getSelectedRow();
        model = (DefaultTableModel) jTable1.getModel();
        na.setText(model.getValueAt(i, 1).toString());
        prix.setText(model.getValueAt(i, 2).toString());
        norme.setText(model.getValueAt(i, 3).toString());
        
    }//GEN-LAST:event_jTable1MouseReleased

    private void supprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            String nom = model.getValueAt(selectedRow, 0).toString();  
            Client.deleteAnalyse(nom);
            model.removeRow(selectedRow);
            clearInputFields();
        } else {
            JOptionPane.showMessageDialog(this, "No analyse selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_supprimerActionPerformed

    private void modifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierActionPerformed

        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow >= 0) {
 
        String idValue = model.getValueAt(selectedRow, 0).toString();
        String naValue = na.getText();
        String prixValue = prix.getText();
        String normeValue = norme.getText();

        
        
        if(!naValue.trim().isEmpty() && !prixValue.trim().isEmpty() && !normeValue.trim().isEmpty() ){
        Client.updateAnalyse(idValue, naValue, prixValue, normeValue);
        
        JOptionPane.showMessageDialog(null, "Analyse Modifier avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);
        
        // Update the user in the table model
        model.setValueAt(naValue, selectedRow, 1);
        model.setValueAt(prixValue, selectedRow, 2);
        model.setValueAt(normeValue, selectedRow, 3);

        jTable1.clearSelection();
        clearInputFields();
        
        }
    } else {
        JOptionPane.showMessageDialog(this, "No Analyse selected", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_modifierActionPerformed

    private void analyseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseActionPerformed
        smoothTransition("client.Gérer_Analyse_Medicale", 1000);
    }//GEN-LAST:event_analyseActionPerformed

    private void stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockActionPerformed
        smoothTransition("client.Produit", 1000, "medecin");
    }//GEN-LAST:event_stockActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        smoothTransition("client.Dossier", 1000, "medecin");
    }//GEN-LAST:event_jButton7ActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed

        smoothTransition("client.Medecin", 1000);
        
    }//GEN-LAST:event_homeActionPerformed

    private void naActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_naActionPerformed

    private void minimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimizeActionPerformed
            setExtendedState(getExtendedState() | Gérer_Analyse_Medicale.ICONIFIED);
    }//GEN-LAST:event_minimizeActionPerformed

    private void colseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colseActionPerformed

            System.exit(0);

    }//GEN-LAST:event_colseActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        setVisible(false);
        new Login().setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed

    private void prixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prixActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prixActionPerformed
    
    
    private void loadAnalyseData() {
    String analyseData = Client.fetchAnalyseData(); // Fetch user data from the server
    if (analyseData != null && !analyseData.equals("No Analyse found")) {
        System.out.println(analyseData);
        // Assuming each user's data is separated by a semicolon
        String[] analyseEntries = analyseData.split(";");

        for (String entry : analyseEntries) {
            String[] dataParts = entry.split(":");
            if (dataParts.length >= 4) {
                Object[] rowData = new Object[5];
                for (int i = 0; i < 4; i++) {
                    rowData[i] = dataParts[i];
                }
                rowData[4] = Boolean.FALSE; // Initialize the checkbox to unchecked
                model.addRow(rowData); // Update the table model directly
            } else {
                System.out.println("Received analyse data in an unexpected format: " + entry);
            }
        }
    } else {
        System.out.println("No data received or analyse not found");
    }
}


 private void loadAnalyseDataForAjouter() {
    model.setRowCount(0);
    String analyseData = Client.fetchAnalyseData(); // Fetch user data from the server
    if (analyseData != null && !analyseData.equals("No Analyse found")) {
        System.out.println(analyseData);
        // Assuming each user's data is separated by a semicolon
        String[] analyseEntries = analyseData.split(";");

        for (String entry : analyseEntries) {
            String[] dataParts = entry.split(":");
            if (dataParts.length >= 4) {
                Object[] rowData = new Object[5];
                for (int i = 0; i < 4; i++) {
                    rowData[i] = dataParts[i];
                }
                rowData[4] = Boolean.FALSE; // Initialize the checkbox to unchecked
                model.addRow(rowData); // Update the table model directly
            } else {
                System.out.println("Received analyse data in an unexpected format: " + entry);
            }
        }
    } else {
        System.out.println("No data received or analyse not found");
    }
}
 
 

    
    private void clearInputFields() {
    na.setText("");
    norme.setText("");
    prix.setText("");
  
}
    
//By: OussamaDeV


private void smoothTransition(String windowName, int delayMilliseconds) {
    // Initialize the Timer outside the EventQueue.invokeLater call
    Timer timer = new Timer(delayMilliseconds, null);

    java.awt.EventQueue.invokeLater(() -> {
        try {
            // Dynamically create an instance of the specified window class
            Class<?> clazz = Class.forName(windowName);
            java.awt.Window window = (java.awt.Window) clazz.getDeclaredConstructor().newInstance();
            
            // Make the window visible
            window.setVisible(true);

            // Update the Timer's ActionListener here
            timer.addActionListener((e) -> {
                // Hide the current window after the delay
                setVisible(false);
                
                // Stop the Timer
                timer.stop();
            });

            // Start the Timer
            timer.start();
        } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException ex) {
            // Handle any exceptions
            ex.printStackTrace();
        }
    });
}
    
    
private void smoothTransition(String windowName, int delayMilliseconds, Object... constructorArgs) {
    // Initialize the Timer outside the EventQueue.invokeLater call
    Timer timer = new Timer(delayMilliseconds, null);

    java.awt.EventQueue.invokeLater(() -> {
        try {
            // Dynamically create an instance of the specified window class
            Class<?> clazz = Class.forName(windowName);
            // Determine parameter types from constructorArgs
            Class<?>[] parameterTypes = new Class<?>[constructorArgs.length];
            for (int i = 0; i < constructorArgs.length; i++) {
                parameterTypes[i] = constructorArgs[i].getClass();
            }
            java.awt.Window window = (java.awt.Window) clazz.getDeclaredConstructor(parameterTypes).newInstance(constructorArgs);
            
            // Make the window visible
            window.setVisible(true);

            // Update the Timer's ActionListener here
            timer.addActionListener((e) -> {
                // Hide the current window after the delay
                setVisible(false);
                
                // Stop the Timer
                timer.stop();
            });

            // Start the Timer
            timer.start();
        } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException ex) {
            // Handle any exceptions
            ex.printStackTrace();
        }
    });
}    
   
    
/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(Gérer_Analyse_Medicale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(Gérer_Analyse_Medicale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(Gérer_Analyse_Medicale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(Gérer_Analyse_Medicale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new Gérer_Analyse_Medicale().setVisible(true);
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ajouter;
    private javax.swing.JButton analyse;
    private javax.swing.JButton colse;
    private javax.swing.JButton home;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton logout;
    private javax.swing.JButton minimize;
    private javax.swing.JButton modifier;
    private javax.swing.JTextField na;
    private javax.swing.JTextField norme;
    private javax.swing.JLabel obligatoire;
    private javax.swing.JLabel obligatoire1;
    private javax.swing.JLabel obligatoire2;
    private javax.swing.JTextField prix;
    private javax.swing.JButton stock;
    private javax.swing.JButton supprimer;
    // End of variables declaration//GEN-END:variables
}
